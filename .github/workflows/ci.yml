name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      SkipLinting:
        description: 'Skip Linting'
        required: false
        default: false
        type: boolean
      SkipUnitTests:
        description: 'Skip Unit Tests'
        required: false
        default: false
        type: boolean
      SkipE2ETests:
        description: 'Skip End-to-End Tests'
        required: false
        default: false
        type: boolean
      SkipPerformanceTests:
        description: 'Skip Performance Tests'
        required: false
        default: false
        type: boolean
      SkipBuild:
        description: 'Skip Application Build'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  # Stage: Install Dependencies
  install-dependencies:
    name: 📦 Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔨 Install Dependencies
        run: |
          npm install
          cd frontend && npm install && npx playwright install
          cd ../backend && npm install

  # Stage: Parallel - Lint & Code Quality
  lint:
    name: 🔍 Lint & Code Quality
    runs-on: ubuntu-latest
    needs: install-dependencies
    if: github.event.inputs.SkipLinting != 'true'
    strategy:
      fail-fast: false
      matrix:
        component: [backend, frontend]
    steps:
      - name: 🔍 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔨 Install Dependencies
        run: |
          if [ "${{ matrix.component }}" = "frontend" ]; then
            cd frontend && npm install
          else
            cd backend && npm install
          fi

      - name: 🔍 Run Linting
        working-directory: ${{ matrix.component }}
        run: npm run lint:check

  # Stage: Parallel - Unit & Integration Tests
  unit-tests:
    name: 🧪 Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: install-dependencies
    if: github.event.inputs.SkipUnitTests != 'true'
    strategy:
      fail-fast: false
      matrix:
        component: [backend, frontend]
    steps:
      - name: 🔍 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔨 Install Dependencies
        run: |
          if [ "${{ matrix.component }}" = "frontend" ]; then
            cd frontend && npm install
          else
            cd backend && npm install
          fi

      - name: 🧪 Run Tests
        working-directory: ${{ matrix.component }}
        run: |
          if [ "${{ matrix.component }}" = "frontend" ]; then
            npm run test:ci
          else
            npm run test:coverage
          fi

      - name: 📊 Archive Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.component }}
          path: ${{ matrix.component }}/coverage/
          retention-days: 30

  # Stage: End-to-End Tests
  e2e-tests:
    name: 🎭 End-to-End Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    if: github.event.inputs.SkipE2ETests != 'true'
    steps:
      - name: 🔍 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔨 Install Dependencies
        run: |
          npm install
          cd frontend && npm install && npx playwright install
          cd ../backend && npm install

      - name: 🚀 Start Backend Server
        working-directory: backend
        run: |
          nohup npm start > ../backend.log 2>&1 & echo $! > ../backend.pid

      - name: 🌐 Start Frontend Server
        working-directory: frontend
        run: |
          nohup npm run preview > ../frontend.log 2>&1 & echo $! > ../frontend.pid

      - name: ⏳ Wait for Servers
        run: sleep 10

      - name: 🎭 Run E2E Tests
        working-directory: frontend
        run: npm run test:e2e:ci

      - name: 🧹 Cleanup Servers
        if: always()
        run: |
          if [ -f backend.pid ]; then
            kill $(cat backend.pid) || true
            rm backend.pid
          fi
          if [ -f frontend.pid ]; then
            kill $(cat frontend.pid) || true
            rm frontend.pid
          fi

      - name: 📊 Archive E2E Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/
            backend.log
            frontend.log
          retention-days: 30

  # Stage: Performance Tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    if: github.event.inputs.SkipPerformanceTests != 'true'
    steps:
      - name: 🔍 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔨 Install Dependencies
        run: |
          npm install
          cd frontend && npm install && npx playwright install
          cd ../backend && npm install

      - name: 🚀 Start Backend Server
        working-directory: backend
        run: |
          nohup npm start > ../backend-perf.log 2>&1 & echo $! > ../backend-perf.pid

      - name: 🌐 Start Frontend Server
        working-directory: frontend
        run: |
          nohup npm run preview > ../frontend-perf.log 2>&1 & echo $! > ../frontend-perf.pid

      - name: ⏳ Wait for Servers
        run: sleep 15

      - name: 🎭 Run Performance Tests
        working-directory: frontend
        run: npm run test:perf:ci

      - name: 🔍 Run Lighthouse Tests
        working-directory: frontend
        run: npm run test:lighthouse:ci

      - name: 🧠 Run Memory Leak Tests
        working-directory: frontend
        run: npm run test:memory-leaks:ci

      - name: 🧹 Cleanup Servers
        if: always()
        run: |
          if [ -f backend-perf.pid ]; then
            kill $(cat backend-perf.pid) || true
            rm backend-perf.pid
          fi
          if [ -f frontend-perf.pid ]; then
            kill $(cat frontend-perf.pid) || true
            rm frontend-perf.pid
          fi

      - name: 📊 Archive Performance Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: |
            frontend/lighthouse-reports/
            backend-perf.log
            frontend-perf.log
          retention-days: 30

  # Stage: Test Summary
  test-summary:
    name: 📋 Test Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, e2e-tests, performance-tests]
    if: always()
    steps:
      - name: 🔍 Checkout Repository
        uses: actions/checkout@v4

      - name: 📊 Generate Test Summary
        run: |
          echo "=== Test Summary ==="
          echo "Lint Status: ${{ needs.lint.result }}"
          echo "Unit Tests Status: ${{ needs.unit-tests.result }}"
          echo "E2E Tests Status: ${{ needs.e2e-tests.result }}"
          echo "Performance Tests Status: ${{ needs.performance-tests.result }}"
          
          # Set final result
          if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.unit-tests.result }}" == "failure" || "${{ needs.e2e-tests.result }}" == "failure" || "${{ needs.performance-tests.result }}" == "failure" ]]; then
            echo "🟡 Build completed with some test failures"
            exit 1
          else
            echo "✅ All tests passed successfully"
          fi

      - name: 📊 Archive Combined Coverage
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          merge-multiple: true

      - name: 📦 Upload Combined Coverage
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage
          path: coverage/
          retention-days: 30 