name: 🎭 End-to-End Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      skip_e2e_tests:
        description: 'Skip E2E Tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'node-deps'

jobs:
  e2e-tests:
    name: 🎭 End-to-End Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_e2e_tests != 'true'
    
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 🔍 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            frontend/node_modules
            backend/node_modules
            ~/.cache/ms-playwright
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-

      - name: 🔨 Install Dependencies
        run: |
          npm install
          cd frontend && npm install && npx playwright install --with-deps
          cd ../backend && npm install

      - name: 🌍 Setup Environment Variables
        run: |
          echo "MONGODB_URI=mongodb://localhost:27017/linkedin_clone_test" >> $GITHUB_ENV
          echo "JWT_SECRET=test_jwt_secret_key_for_e2e_tests" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "PORT=5000" >> $GITHUB_ENV
          echo "FRONTEND_URL=http://localhost:3000" >> $GITHUB_ENV

      - name: 🚀 Start Backend Server
        working-directory: backend
        run: |
          npm start &
          echo $! > ../backend.pid
          # Wait for backend to be ready
          npx wait-on http://localhost:5000/api/health --timeout 60000 || (echo "Backend failed to start" && exit 1)

      - name: 🌐 Build and Start Frontend Server
        working-directory: frontend
        run: |
          npm run build
          npm run preview &
          echo $! > ../frontend.pid
          # Wait for frontend to be ready
          npx wait-on http://localhost:4173 --timeout 60000 || (echo "Frontend failed to start" && exit 1)

      - name: 🔍 Verify Services
        run: |
          echo "Checking backend health..."
          curl -f http://localhost:5000/api/health || (echo "Backend health check failed" && exit 1)
          echo "Checking frontend..."
          curl -f http://localhost:4173 || (echo "Frontend health check failed" && exit 1)

      - name: 🎭 Run Playwright E2E Tests
        working-directory: frontend
        run: npm run test:e2e:ci

      - name: 🧹 Cleanup Servers
        if: always()
        run: |
          if [ -f backend.pid ]; then
            kill $(cat backend.pid) || true
            rm backend.pid
          fi
          if [ -f frontend.pid ]; then
            kill $(cat frontend.pid) || true
            rm frontend.pid
          fi

      - name: 📊 Upload E2E Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/
          retention-days: 30

      - name: 📈 Publish E2E Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: E2E Test Results
          path: frontend/test-results/junit.xml
          reporter: java-junit

      - name: 💬 Comment E2E Results on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## 🎭 End-to-End Test Results\n\n';
            
            if ('${{ job.status }}' === 'success') {
              comment += '✅ **All E2E tests passed!**\n\n';
            } else {
              comment += '❌ **Some E2E tests failed.**\n\n';
              comment += '📊 [View detailed test report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n';
            }
            
            comment += '### 📋 Test Artifacts\n';
            comment += '- Test results and screenshots are available in the job artifacts\n';
            comment += '- Playwright HTML report with detailed failure information\n';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }); 