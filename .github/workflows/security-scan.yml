name: 🔒 Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  dependency-security:
    name: 🔍 Dependency Security Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [frontend, backend, root]
        
    steps:
      - name: 🔍 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔍 Run npm audit (${{ matrix.component }})
        run: |
          if [ "${{ matrix.component }}" = "root" ]; then
            echo "Running npm audit for root directory..."
            npm audit --audit-level=moderate || echo "Audit found issues in root"
          else
            echo "Running npm audit for ${{ matrix.component }}..."
            cd ${{ matrix.component }}
            npm audit --audit-level=moderate || echo "Audit found issues in ${{ matrix.component }}"
          fi

      - name: 📊 Generate Security Report (${{ matrix.component }})
        run: |
          if [ "${{ matrix.component }}" = "root" ]; then
            npm audit --json > security-report-${{ matrix.component }}.json || true
          else
            cd ${{ matrix.component }}
            npm audit --json > ../security-report-${{ matrix.component }}.json || true
          fi

      - name: 📦 Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ matrix.component }}
          path: security-report-${{ matrix.component }}.json
          retention-days: 30

  codeql-analysis:
    name: 🔒 CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']

    steps:
      - name: 🔍 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: 🔨 Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  secret-scan:
    name: 🔐 Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔍 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔐 Run TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  license-check:
    name: 📋 License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔍 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔨 Install license-checker
        run: npm install -g license-checker

      - name: 📋 Check Root Dependencies Licenses
        run: |
          npm install
          license-checker --json --out license-report-root.json || true

      - name: 📋 Check Frontend Dependencies Licenses
        run: |
          cd frontend
          npm install
          license-checker --json --out ../license-report-frontend.json || true

      - name: 📋 Check Backend Dependencies Licenses
        run: |
          cd backend
          npm install
          license-checker --json --out ../license-report-backend.json || true

      - name: 📦 Upload License Reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: license-report-*.json
          retention-days: 30

  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-security, codeql-analysis, secret-scan, license-check]
    if: always()
    
    steps:
      - name: 🔍 Checkout Repository
        uses: actions/checkout@v4

      - name: 📊 Download Security Reports
        uses: actions/download-artifact@v4
        with:
          pattern: security-report-*
          merge-multiple: true

      - name: 📋 Generate Security Summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job statuses
          if [ "${{ needs.dependency-security.result }}" == "success" ]; then
            echo "✅ **Dependency Security**: No critical vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Dependency Security**: Issues detected - review audit reports" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.codeql-analysis.result }}" == "success" ]; then
            echo "✅ **Code Security**: No security issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Code Security**: Potential issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.secret-scan.result }}" == "success" ]; then
            echo "✅ **Secret Scanning**: No secrets detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "🚨 **Secret Scanning**: Potential secrets found - immediate review required!" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.license-check.result }}" == "success" ]; then
            echo "✅ **License Compliance**: All dependencies checked" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **License Compliance**: Review required" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Actions Required" >> $GITHUB_STEP_SUMMARY
          echo "- Review security reports in job artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Address any high/critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Verify license compliance for new dependencies" >> $GITHUB_STEP_SUMMARY

      - name: 🚨 Notify on Critical Security Issues
        if: needs.secret-scan.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = '🚨 Critical Security Alert: Secrets Detected';
            const body = `
            **IMMEDIATE ACTION REQUIRED**
            
            The security scan has detected potential secrets in the codebase.
            
            **Next Steps:**
            1. Review the TruffleHog scan results immediately
            2. Rotate any exposed credentials
            3. Remove secrets from git history if necessary
            4. Update security policies to prevent future exposure
            
            **Scan Results:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            // Create an issue for critical security findings
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'critical', 'immediate-action-required']
            }); 