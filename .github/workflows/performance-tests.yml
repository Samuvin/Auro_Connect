name: ‚ö° Performance Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      skip_performance_tests:
        description: 'Skip Performance Tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'node-deps'

jobs:
  performance-tests:
    name: ‚ö° Performance Testing Suite
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_performance_tests != 'true'
    
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: üîç Checkout Repository
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            frontend/node_modules
            backend/node_modules
            ~/.cache/ms-playwright
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-

      - name: üî® Install Dependencies
        run: |
          npm install
          cd frontend && npm install && npx playwright install --with-deps
          cd ../backend && npm install

      - name: üåç Setup Environment Variables
        run: |
          echo "MONGODB_URI=mongodb://localhost:27017/linkedin_clone_perf" >> $GITHUB_ENV
          echo "JWT_SECRET=test_jwt_secret_key_for_perf_tests" >> $GITHUB_ENV
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "PORT=5000" >> $GITHUB_ENV
          echo "FRONTEND_URL=http://localhost:3000" >> $GITHUB_ENV

      - name: üöÄ Start Backend Server
        working-directory: backend
        run: |
          npm start &
          echo $! > ../backend-perf.pid
          # Wait longer for production build
          npx wait-on http://localhost:5000/api/health --timeout 90000 || (echo "Backend failed to start" && exit 1)

      - name: üåê Build and Start Frontend Server (Production)
        working-directory: frontend
        run: |
          npm run build
          npm run preview &
          echo $! > ../frontend-perf.pid
          # Wait for frontend to be ready
          npx wait-on http://localhost:4173 --timeout 90000 || (echo "Frontend failed to start" && exit 1)

      - name: ‚è±Ô∏è Wait for Services to Stabilize
        run: sleep 15

      - name: üé≠ Run Performance Tests
        working-directory: frontend
        run: npm run test:perf:ci

      - name: üîç Run Lighthouse Performance Audit
        working-directory: frontend
        run: npm run test:lighthouse:ci

      - name: üß† Run Memory Leak Detection
        working-directory: frontend
        run: npm run test:memory-leaks:ci

      - name: üßπ Cleanup Servers
        if: always()
        run: |
          if [ -f backend-perf.pid ]; then
            kill $(cat backend-perf.pid) || true
            rm backend-perf.pid
          fi
          if [ -f frontend-perf.pid ]; then
            kill $(cat frontend-perf.pid) || true
            rm frontend-perf.pid
          fi

      - name: üìä Upload Performance Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: |
            frontend/lighthouse-reports/
            frontend/test-results/
            frontend/playwright-report/
          retention-days: 30

      - name: üìà Parse Lighthouse Results
        if: always()
        run: |
          if [ -f frontend/lighthouse-reports/lighthouse-report.json ]; then
            echo "## ‚ö° Performance Test Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract Lighthouse scores (this is a simplified example)
            PERFORMANCE=$(cat frontend/lighthouse-reports/lighthouse-report.json | jq -r '.categories.performance.score * 100 | floor')
            ACCESSIBILITY=$(cat frontend/lighthouse-reports/lighthouse-report.json | jq -r '.categories.accessibility.score * 100 | floor')
            BEST_PRACTICES=$(cat frontend/lighthouse-reports/lighthouse-report.json | jq -r '.categories["best-practices"].score * 100 | floor')
            SEO=$(cat frontend/lighthouse-reports/lighthouse-report.json | jq -r '.categories.seo.score * 100 | floor')
            
            echo "### üö® Lighthouse Scores" >> $GITHUB_STEP_SUMMARY
            echo "- **Performance**: ${PERFORMANCE}/100" >> $GITHUB_STEP_SUMMARY
            echo "- **Accessibility**: ${ACCESSIBILITY}/100" >> $GITHUB_STEP_SUMMARY  
            echo "- **Best Practices**: ${BEST_PRACTICES}/100" >> $GITHUB_STEP_SUMMARY
            echo "- **SEO**: ${SEO}/100" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Set performance thresholds
            if [ $PERFORMANCE -lt 70 ]; then
              echo "‚ö†Ô∏è **Warning**: Performance score is below 70!" >> $GITHUB_STEP_SUMMARY
              echo "performance_warning=true" >> $GITHUB_ENV
            fi
          fi

      - name: üí¨ Comment Performance Results on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## ‚ö° Performance Test Results\n\n';
            
            if ('${{ job.status }}' === 'success') {
              comment += '‚úÖ **Performance tests completed successfully!**\n\n';
            } else {
              comment += '‚ùå **Some performance tests failed or had issues.**\n\n';
            }
            
            // Add Lighthouse scores if available
            try {
              const lighthouseReport = JSON.parse(fs.readFileSync('frontend/lighthouse-reports/lighthouse-report.json', 'utf8'));
              const scores = {
                performance: Math.floor(lighthouseReport.categories.performance.score * 100),
                accessibility: Math.floor(lighthouseReport.categories.accessibility.score * 100),
                bestPractices: Math.floor(lighthouseReport.categories['best-practices'].score * 100),
                seo: Math.floor(lighthouseReport.categories.seo.score * 100)
              };
              
              comment += '### üö® Lighthouse Scores\n';
              comment += `- **Performance**: ${scores.performance}/100\n`;
              comment += `- **Accessibility**: ${scores.accessibility}/100\n`;
              comment += `- **Best Practices**: ${scores.bestPractices}/100\n`;
              comment += `- **SEO**: ${scores.seo}/100\n\n`;
              
              if (scores.performance < 70) {
                comment += '‚ö†Ô∏è **Warning**: Performance score is below 70!\n\n';
              }
            } catch (error) {
              comment += '‚ö†Ô∏è Could not parse Lighthouse results\n\n';
            }
            
            comment += '### üìã Test Artifacts\n';
            comment += '- Lighthouse reports and performance metrics are available in job artifacts\n';
            comment += '- Memory leak detection results\n';
            comment += `- [View detailed results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: üö® Fail Job on Performance Regression
        if: env.performance_warning == 'true'
        run: |
          echo "Performance score is below acceptable threshold!"
          exit 1 